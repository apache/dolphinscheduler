# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

on:
  pull_request:
    types:
      - labeled
      - unlabeled
      - milestoned
      - demilestoned


name: "Mergeable"


jobs:
  result:
    name: "Mergeable: milestone-label-check"
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Check milestone and labels
        uses: actions/github-script@v7
        with:
          script: |
            const { data } = await github.request("GET /repos/{owner}/{repo}/pulls/{pr}", {
              owner: context.repo.owner,
              repo: context.repo.repo,
              pr: context.payload.pull_request.number
            });
            if (data.milestone) {
              core.info(`This pull request has a milestone: ${data.milestone.title}`);
            } else {
              core.setFailed(`A maintainer needs to set the milestone for this pull request.`);
            }
            let labeledFlag = false;
            for (const label of data.labels) {
              if (['feature', 'bug', 'improvement', 'document', 'chore', 'DSIP', 'CI&CD', 'revert'].includes(label.name)) {
                core.info(`This pull request has a valid label: ${label.name}`);
                labeledFlag = true;
                break;
              }
            }
            if (!labeledFlag) {
              core.setFailed(`A maintainer needs to set a valid label for this pull request.`);
            }
