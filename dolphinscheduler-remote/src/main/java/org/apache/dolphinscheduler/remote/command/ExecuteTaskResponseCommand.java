/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *    http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.dolphinscheduler.remote.command;import org.apache.dolphinscheduler.remote.utils.FastJsonSerializer;import java.io.Serializable;/** *  execute task response command */public class ExecuteTaskResponseCommand implements Serializable {    /**     *  task id     */    private String taskId;    /**     *  attempt id     */    private String attemptId;    /**     *  return result     */    private Object result;    /**     *  received time     */    private long receivedTime;    /**     *  execute count     */    private int executeCount;    /**     *  execute time     */    private long executeTime;    public String getAttemptId() {        return attemptId;    }    public void setAttemptId(String attemptId) {        this.attemptId = attemptId;    }    public String getTaskId() {        return taskId;    }    public void setTaskId(String taskId) {        this.taskId = taskId;    }    public Object getResult() {        return result;    }    public void setResult(Object result) {        this.result = result;    }    public long getReceivedTime() {        return receivedTime;    }    public void setReceivedTime(long receivedTime) {        this.receivedTime = receivedTime;    }    public int getExecuteCount() {        return executeCount;    }    public void setExecuteCount(int executeCount) {        this.executeCount = executeCount;    }    public long getExecuteTime() {        return executeTime;    }    public void setExecuteTime(long executeTime) {        this.executeTime = executeTime;    }    public Command convert2Command(long opaque){        Command command = new Command();        command.setType(CommandType.EXECUTE_TASK_RESPONSE);        byte[] body = FastJsonSerializer.serialize(this);        command.setBody(body);        return command;    }}