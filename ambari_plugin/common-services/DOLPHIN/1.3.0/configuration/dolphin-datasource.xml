<!--
  ~ Licensed to the Apache Software Foundation (ASF) under one or more
  ~ contributor license agreements.  See the NOTICE file distributed with
  ~ this work for additional information regarding copyright ownership.
  ~ The ASF licenses this file to You under the Apache License, Version 2.0
  ~ (the "License"); you may not use this file except in compliance with
  ~ the License.  You may obtain a copy of the License at
  ~
  ~     http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->
<configuration>
	<property>
		<name>spring.datasource.initialSize</name>
		<value>5</value>
		<description>
			Init connection number
		</description>
		<value-attributes>
			<type>int</type>
		</value-attributes>
		<on-ambari-upgrade add="true"/>
	</property>
	<property>
		<name>spring.datasource.minIdle</name>
		<value>5</value>
		<description>
			Min connection number
		</description>
		<value-attributes>
			<type>int</type>
		</value-attributes>
		<on-ambari-upgrade add="true"/>
	</property>
	<property>
		<name>spring.datasource.maxActive</name>
		<value>50</value>
		<description>
			Max connection number
		</description>
		<value-attributes>
			<type>int</type>
		</value-attributes>
		<on-ambari-upgrade add="true"/>
	</property>
	<property>
		<name>spring.datasource.maxWait</name>
		<value>60000</value>
		<description>
			Max wait time for get a connection in milliseconds.
			If configuring maxWait, fair locks are enabled by default and concurrency efficiency decreases.
			If necessary, unfair locks can be used by configuring the useUnfairLock attribute to true.
		</description>
		<value-attributes>
			<type>int</type>
		</value-attributes>
		<on-ambari-upgrade add="true"/>
	</property>
	<property>
		<name>spring.datasource.timeBetweenEvictionRunsMillis</name>
		<value>60000</value>
		<description>
			Milliseconds for check to close free connections
		</description>
		<value-attributes>
			<type>int</type>
		</value-attributes>
		<on-ambari-upgrade add="true"/>
	</property>
	<property>
		<name>spring.datasource.timeBetweenConnectErrorMillis</name>
		<value>60000</value>
		<description>
			The Destroy thread detects the connection interval and closes the physical connection in milliseconds
			if the connection idle time is greater than or equal to minEvictableIdleTimeMillis.
		</description>
		<value-attributes>
			<type>int</type>
		</value-attributes>
		<on-ambari-upgrade add="true"/>
	</property>
	<property>
		<name>spring.datasource.minEvictableIdleTimeMillis</name>
		<value>300000</value>
		<description>
			The longest time a connection remains idle without being evicted, in milliseconds
		</description>
		<value-attributes>
			<type>int</type>
		</value-attributes>
		<on-ambari-upgrade add="true"/>
	</property>
	<property>
		<name>spring.datasource.validationQuery</name>
		<value>SELECT 1</value>
		<description>
			The SQL used to check whether the connection is valid requires a query statement.
			If validation Query is null, testOnBorrow, testOnReturn, and testWhileIdle will not work.
		</description>
		<on-ambari-upgrade add="true"/>
	</property>
	<property>
		<name>spring.datasource.validationQueryTimeout</name>
		<value>3</value>
		<value-attributes>
			<type>int</type>
		</value-attributes>
		<description>
			Check whether the connection is valid for timeout, in seconds
		</description>
		<on-ambari-upgrade add="true"/>
	</property>
	<property>
		<name>spring.datasource.testWhileIdle</name>
		<value>true</value>
		<value-attributes>
			<type>boolean</type>
		</value-attributes>
		<description>
			When applying for a connection,
			if it is detected that the connection is idle longer than time Between Eviction Runs Millis,
			validation Query is performed to check whether the connection is valid
		</description>
		<on-ambari-upgrade add="true"/>
	</property>
	<property>
		<name>spring.datasource.testOnBorrow</name>
		<value>true</value>
		<value-attributes>
			<type>boolean</type>
		</value-attributes>
		<description>
			Execute validation to check if the connection is valid when applying for a connection
		</description>
		<on-ambari-upgrade add="true"/>
	</property>
	<property>
		<name>spring.datasource.testOnReturn</name>
		<value>false</value>
		<value-attributes>
			<type>boolean</type>
		</value-attributes>
		<description>
			Execute validation to check if the connection is valid when the connection is returned
		</description>
		<on-ambari-upgrade add="true"/>
	</property>
	<property>
		<name>spring.datasource.defaultAutoCommit</name>
		<value>true</value>
		<value-attributes>
			<type>boolean</type>
		</value-attributes>
		<description>
		</description>
		<on-ambari-upgrade add="true"/>
	</property>
	<property>
		<name>spring.datasource.keepAlive</name>
		<value>false</value>
		<value-attributes>
			<type>boolean</type>
		</value-attributes>
		<description>
		</description>
		<on-ambari-upgrade add="true"/>
	</property>

	<property>
		<name>spring.datasource.poolPreparedStatements</name>
		<value>true</value>
		<value-attributes>
			<type>boolean</type>
		</value-attributes>
		<description>
			Open PSCache, specify count PSCache for every connection
		</description>
		<on-ambari-upgrade add="true"/>
	</property>
	<property>
		<name>spring.datasource.maxPoolPreparedStatementPerConnectionSize</name>
		<value>20</value>
		<value-attributes>
			<type>int</type>
		</value-attributes>
		<description></description>
		<on-ambari-upgrade add="true"/>
	</property>
	<property>
		<name>spring.datasource.spring.datasource.filters</name>
		<value>stat,wall,log4j</value>
		<description></description>
		<on-ambari-upgrade add="true"/>
	</property>
	<property>
		<name>spring.datasource.connectionProperties</name>
		<value>druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000</value>
		<description></description>
		<on-ambari-upgrade add="true"/>
	</property>

	<property>
		<name>mybatis-plus.mapper-locations</name>
		<value>classpath*:/org.apache.dolphinscheduler.dao.mapper/*.xml</value>
		<description></description>
		<on-ambari-upgrade add="true"/>
	</property>
	<property>
		<name>mybatis-plus.typeEnumsPackage</name>
		<value>org.apache.dolphinscheduler.*.enums</value>
		<description></description>
		<on-ambari-upgrade add="true"/>
	</property>
	<property>
		<name>mybatis-plus.typeAliasesPackage</name>
		<value>org.apache.dolphinscheduler.dao.entity</value>
		<description>
			Entity scan, where multiple packages are separated by a comma or semicolon
		</description>
		<on-ambari-upgrade add="true"/>
	</property>
	<property>
		<name>mybatis-plus.global-config.db-config.id-type</name>
		<value>AUTO</value>
		<value-attributes>
			<type>value-list</type>
			<entries>
				<entry>
					<value>AUTO</value>
					<label>AUTO</label>
				</entry>
				<entry>
					<value>INPUT</value>
					<label>INPUT</label>
				</entry>
				<entry>
					<value>ID_WORKER</value>
					<label>ID_WORKER</label>
				</entry>
				<entry>
					<value>UUID</value>
					<label>UUID</label>
				</entry>
			</entries>
			<selection-cardinality>1</selection-cardinality>
		</value-attributes>
		<description>
			Primary key type AUTO:" database ID AUTO ",
			INPUT:" user INPUT ID",
			ID_WORKER:" global unique ID (numeric type unique ID)",
			UUID:" global unique ID UUID";
		</description>
		<on-ambari-upgrade add="true"/>
	</property>
	<property>
		<name>mybatis-plus.global-config.db-config.field-strategy</name>
		<value>NOT_NULL</value>
		<value-attributes>
			<type>value-list</type>
			<entries>
				<entry>
					<value>IGNORED</value>
					<label>IGNORED</label>
				</entry>
				<entry>
					<value>NOT_NULL</value>
					<label>NOT_NULL</label>
				</entry>
				<entry>
					<value>NOT_EMPTY</value>
					<label>NOT_EMPTY</label>
				</entry>
			</entries>
			<selection-cardinality>1</selection-cardinality>
		</value-attributes>
		<description>
			Field policy IGNORED:" ignore judgment ",
			NOT_NULL:" not NULL judgment "),
			NOT_EMPTY:" not NULL judgment"
		</description>
		<on-ambari-upgrade add="true"/>
	</property>
	<property>
		<name>mybatis-plus.global-config.db-config.column-underline</name>
		<value>true</value>
		<value-attributes>
			<type>boolean</type>
		</value-attributes>
		<description></description>
		<on-ambari-upgrade add="true"/>
	</property>
	<property>
		<name>mybatis-plus.global-config.db-config.logic-delete-value</name>
		<value>1</value>
		<value-attributes>
			<type>int</type>
		</value-attributes>
		<description></description>
		<on-ambari-upgrade add="true"/>
	</property>
	<property>
		<name>mybatis-plus.global-config.db-config.logic-not-delete-value</name>
		<value>0</value>
		<value-attributes>
			<type>int</type>
		</value-attributes>
		<description></description>
		<on-ambari-upgrade add="true"/>
	</property>
	<property>
		<name>mybatis-plus.global-config.db-config.banner</name>
		<value>true</value>
		<value-attributes>
			<type>boolean</type>
		</value-attributes>
		<description></description>
		<on-ambari-upgrade add="true"/>
	</property>

	<property>
		<name>mybatis-plus.configuration.map-underscore-to-camel-case</name>
		<value>true</value>
		<value-attributes>
			<type>boolean</type>
		</value-attributes>
		<description></description>
		<on-ambari-upgrade add="true"/>
	</property>
	<property>
		<name>mybatis-plus.configuration.cache-enabled</name>
		<value>false</value>
		<value-attributes>
			<type>boolean</type>
		</value-attributes>
		<description></description>
		<on-ambari-upgrade add="true"/>
	</property>
	<property>
		<name>mybatis-plus.configuration.call-setters-on-nulls</name>
		<value>true</value>
		<value-attributes>
			<type>boolean</type>
		</value-attributes>
		<description></description>
		<on-ambari-upgrade add="true"/>
	</property>
	<property>
		<name>mybatis-plus.configuration.jdbc-type-for-null</name>
		<value>null</value>
		<description></description>
		<on-ambari-upgrade add="true"/>
	</property>
	<property>
		<name>master.exec.threads</name>
		<value>100</value>
		<value-attributes>
			<type>int</type>
		</value-attributes>
		<description></description>
		<on-ambari-upgrade add="true"/>
	</property>
	<property>
		<name>master.exec.task.num</name>
		<value>20</value>
		<value-attributes>
			<type>int</type>
		</value-attributes>
		<description></description>
		<on-ambari-upgrade add="true"/>
	</property>
	<property>
		<name>master.heartbeat.interval</name>
		<value>10</value>
		<value-attributes>
			<type>int</type>
		</value-attributes>
		<description></description>
		<on-ambari-upgrade add="true"/>
	</property>
	<property>
		<name>master.task.commit.retryTimes</name>
		<value>5</value>
		<value-attributes>
			<type>int</type>
		</value-attributes>
		<description></description>
		<on-ambari-upgrade add="true"/>
	</property>
	<property>
		<name>master.task.commit.interval</name>
		<value>1000</value>
		<value-attributes>
			<type>int</type>
		</value-attributes>
		<description></description>
		<on-ambari-upgrade add="true"/>
	</property>
	<property>
		<name>master.max.cpuload.avg</name>
		<value>100</value>
		<value-attributes>
			<type>int</type>
		</value-attributes>
		<description></description>
		<on-ambari-upgrade add="true"/>
	</property>
	<property>
		<name>master.reserved.memory</name>
		<value>0.1</value>
		<value-attributes>
			<type>float</type>
		</value-attributes>
		<description></description>
		<on-ambari-upgrade add="true"/>
	</property>
	<property>
		<name>worker.exec.threads</name>
		<value>100</value>
		<value-attributes>
			<type>int</type>
		</value-attributes>
		<description></description>
		<on-ambari-upgrade add="true"/>
	</property>
	<property>
		<name>worker.heartbeat.interval</name>
		<value>10</value>
		<value-attributes>
			<type>int</type>
		</value-attributes>
		<description></description>
		<on-ambari-upgrade add="true"/>
	</property>
	<property>
		<name>worker.fetch.task.num</name>
		<value>3</value>
		<value-attributes>
			<type>int</type>
		</value-attributes>
		<description></description>
		<on-ambari-upgrade add="true"/>
	</property>
	<property>
		<name>worker.max.cpuload.avg</name>
		<value>100</value>
		<value-attributes>
			<type>int</type>
		</value-attributes>
		<description></description>
		<on-ambari-upgrade add="true"/>
	</property>
	<property>
		<name>worker.reserved.memory</name>
		<value>0.1</value>
		<value-attributes>
			<type>float</type>
		</value-attributes>
		<description></description>
		<on-ambari-upgrade add="true"/>
	</property>

</configuration>