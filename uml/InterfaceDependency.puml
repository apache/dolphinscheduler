@startuml
package "org.apache.dolphinscheduler.plugin.task.api"{
    class TaskExecutionContext{
        many args...
    }
    interface TaskChannelFactory {
    ~ TaskChannel create()
    }
    TaskChannelFactory-->TaskChannel
    TaskChannelFactory--|>UiChannelFactory
    interface UiChannelFactory{
        ~String getName()
        ~List<PluginParams> getParams()
    }
    interface TaskChannel {
        ~void cancelApplication(boolean status);
        ~AbstractTask createTask(TaskExecutionContext taskRequest);
        ~AbstractParameters parseParameters(ParametersNode parametersNode);
        ~ResourceParametersHelper getResources(String parameters);
    }
    TaskChannel-->AbstractTask
    abstract class  AbstractTask{
        ~handle()
        ~init()
    }
    abstract class AbstractTaskExecutor extends AbstractTask {

    }

    class AbstractParameters{
        - List<Property> localParams
        - List<Property> varPool

    }

}
package "org.apache.dolphinscheduler.service.task"{
    class TaskPluginManager{
    - installPlugins()
    }

    TaskPluginManager-->TaskChannelFactory
    TaskPluginManager*->TaskChannel
}
package "org.apache.dolphinscheduler.server.worker.runner"{
    class TaskExecuteThread{
    + run()
    }
    TaskExecuteThread*->AbstractTask
    TaskExecuteThread*->TaskPluginManager
    TaskExecuteThread*->TaskExecutionContext
    TaskExecuteThread-->TaskChannel
}



@enduml