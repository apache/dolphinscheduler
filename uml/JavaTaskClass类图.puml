@startuml

package "org.apache.dolphinscheduler.plugin.task.api"{
    class TaskExecutionContext{
        many args...
    }
    interface TaskChannelFactory {
    ~ TaskChannel create()
    }
    TaskChannelFactory-->TaskChannel
    TaskChannelFactory--|>UiChannelFactory
    interface UiChannelFactory{
        ~String getName()
        ~List<PluginParams> getParams()
    }
    interface TaskChannel {
        ~void cancelApplication(boolean status);
        ~AbstractTask createTask(TaskExecutionContext taskRequest);
        ~AbstractParameters parseParameters(ParametersNode parametersNode);
        ~ResourceParametersHelper getResources(String parameters);
    }
    TaskChannel-->AbstractTask
    abstract class  AbstractTask{
        ~handle()
        ~init()
    }
    class AbstractParameters{
        - List<Property> localParams
        - List<Property> varPool

    }
    abstract class AbstractTaskExecutor extends AbstractTask {}

     abstract class AbstractCommandExecutor {
            # StringBuilder varPool
            - Process process
            # TaskExecutionContext taskRequest
            - void buildProcess(String)
            + TaskResponse run(String)
        }


        class ShellCommandExecutor extends AbstractCommandExecutor {
            - static final String SH = "sh";
            - static final String CMD = "cmd.exe";
        }
}

package "org.apache.dolphinscheduler.service.task"{
    class TaskPluginManager{
    - installPlugins()
    }

    TaskPluginManager-->TaskChannelFactory
    TaskPluginManager*->TaskChannel
}
package "org.apache.dolphinscheduler.server.worker.runner"{
    class TaskExecuteThread{
    + run()
    }
    TaskExecuteThread*->AbstractTask
    TaskExecuteThread*->TaskPluginManager
    TaskExecuteThread*->TaskExecutionContext
    TaskExecuteThread-->TaskChannel
}

package "org.apache.dolphinscheduler.plugin.task.java"{
    class JavaTask {
    - JavaParameters javaParameters
    - ShellCommandExecutor shellCommandExecutor
    - TaskExecutionContext taskRequest
    + <<Create>> JavaTask(TaskExecutionContext)
    + void init()
    + String getPreScript()
    + void handle()
    - String buildJavaCommand()
    - String buildJarCommand()
    + void cancelApplication(boolean)
    + AbstractParameters getParameters()
    - {static} String convertJavaSourceCodePlaceholders(String)
    # void createJavaSourceFileIfNotExists(String,String)
    # String buildJavaSourceCodeFileFullName()
    - String buildResourcePath()
    # String compilerRawScript(String)
    - String buildJavaSourceContent()
    - String buildJavaExecuteCommand(String)
    }
    class JavaTaskChannel {
         +void cancelApplication(boolean status)
         +JavaTask createTask(TaskExecutionContext taskRequest)
         +AbstractParameters parseParameters(ParametersNode parametersNode)
         +ResourceParametersHelper getResources(String parameters)
    }


    class JavaConstants{
        +String JAVA_HOME8
        +String JAVA_HOME11
        +String JAVA_HOME13
        +String JAVA_HOME15
        +String JAVA_HOME17
        +String RUN_TYPE_JAVA
        +String RUN_TYPE_JAR
        +String RUN_TYPE_JSHELL
        +String PATH_SEPARATOR
        +String CLASSPATH_CURRENT_DIR
        +String JAVA_SOURCE_CODE_NAME_TEMPLATE
    }

    class JavaParameters{
        -String rawScript
        -ResourceInfo mainJar
        -String runType
        -String mainArgs
        -String jvmArgs
        -JavaVersion javaVersion
        -List<ResourceInfo> resourceList
    }

    class JavaTaskChannelFactory{
        + TaskChannel create()
        + String getName()
        + List<PluginParams> getParams()
    }

    enum JavaVersion{
            JAVA_8
            JAVA_11
            JAVA_13
            JAVA_15
            JAVA_17
    }
    JavaTask*->JavaParameters
    JavaTask-->JavaConstants
    JavaTask-->JavaVersion
    JavaTask*->TaskExecutionContext
    ShellCommandExecutor<-*JavaTask
    TaskChannelFactory<|..JavaTaskChannelFactory
    AbstractParameters<|--JavaParameters
    AbstractTaskExecutor <|-- JavaTask
    TaskChannel <|..JavaTaskChannel
}

@enduml